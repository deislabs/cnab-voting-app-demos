trigger:
- master

variables:
- group: cnab-voting-app-demos
- name: GOBIN
  value: '$(GOPATH)/bin' # Go binaries path
- name: GOROOT
  value: '/usr/local/go1.11' # Go installation path
- name: GOPATH
  value: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
- name: DOCKER_REGISTRY
  value: 'cnab'

steps:
- task: Docker@1
  displayName: Login
  inputs:
    containerRegistryType: Container Registry
    dockerRegistryEndpoint: cnab-registry
    command: login

- task: HelmInstaller@0
  inputs:
    helmVersion: '2.12.1'
    checkLatestHelmVersion: false

- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

# TODO: Alternatively, we could run all duffle cmds via deislabs/duffle:latest docker container and remove this (and GO setup)
# Get Duffle
- script: |
    git clone https://github.com/deislabs/duffle.git '$(GOPATH)/src/github.com/deislabs/duffle'
    cd $(GOPATH)/src/github.com/deislabs/duffle
    make bootstrap build
    cp bin/duffle $(GOPATH)/bin/
    cd $(Build.SourcesDirectory)
  displayName: 'Install duffle'

# Fetch AKS Kubeconfig
- task: DownloadSecureFile@1
  inputs:
    secureFile: kubeconfig

- bash: |
    make init
    make build
  failOnStderr: true
  displayName: 'Build and sign bundle'

- bash: |
    make push
  failOnStderr: true
  displayName: 'Push bundle invocation image(s)'

- bash: |
    make export
    AZURE_STORAGE_CONNECTION_STRING=$(AZURE_STORAGE_CONNECTION_STRING) make upload
  failOnStderr: true
  displayName: 'Export bundle and upload to Azure Storage'

# TODO: once upload is working, we can add download & import step here to prove concept
# - bash: |
#     AZURE_STORAGE_CONNECTION_STRING=$(AZURE_STORAGE_CONNECTION_STRING) make download
#     make import
#   failOnStderr: true
#   displayName: 'Export bundle and upload to Azure Storage'

# TODO: if we enable importing above, we'd want to spec BUNDLE=$(BUNDLE)-$(BUNDLE_VERSION) for steps below
- bash: |
    make install
  env:
    KUBECONFIG: $(DOWNLOADSECUREFILE_SECUREFILEPATH)
  failOnStderr: true
  displayName: 'Install bundle'

- bash: |
    make status
  env:
    KUBECONFIG: $(DOWNLOADSECUREFILE_SECUREFILEPATH)
  failOnStderr: true
  displayName: 'Check bundle status'

- bash: |
    make upgrade
  env:
    KUBECONFIG: $(DOWNLOADSECUREFILE_SECUREFILEPATH)
  failOnStderr: true
  displayName: 'Upgrade bundle'

- bash: |
    make status
  env:
    KUBECONFIG: $(DOWNLOADSECUREFILE_SECUREFILEPATH)
  failOnStderr: true
  displayName: 'Check bundle status'

- bash: |
    make uninstall
  env:
    KUBECONFIG: $(DOWNLOADSECUREFILE_SECUREFILEPATH)
  failOnStderr: true
  displayName: 'Uninstall bundle'

